---
import "../../../styles/global.css";
import "../../../styles/markdown.css";
import { getCollection } from "astro:content";
import { getTranslations } from "@/i18n";

import BaseLayout from "@/layouts/BaseLayout.astro";
import BlogLayout from "@/layouts/BlogLayout.astro";
import { render } from "astro:content";

export async function getStaticPaths() {
  const allPosts = await getCollection("blog");

  const paths = allPosts.map((post) => ({
    params: {
      lang: post.data.lang,
      id: post.data.id,
    },
  }));

  return paths;
}

const { lang = "en", id } = Astro.params;

const t = getTranslations(lang);

const allPosts = await getCollection("blog");
const post = allPosts.filter(
  (post) => post.data.lang === lang && post.data.id === id
)[0];

const { Content } = await render(post);
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>

<BlogLayout lang={lang} title={t.title}>
  <main class="md:w-[60%] px-6 mx-auto markdown-content">
    <Content />
  </main>
</BlogLayout>
